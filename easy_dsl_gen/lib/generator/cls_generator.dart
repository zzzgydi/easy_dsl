import 'package:dart_style/dart_style.dart';

import 'cls_item.dart';
import 'widget_generator.dart';

class ClsGenerator {
  ClsGenerator({
    required this.partOfUri,
    required this.items,
  });

  final String partOfUri;
  final List<ClsItem> items;

  final formatter = DartFormatter();

  String generate() {
    final taskMap = <String, List<ClsItem>>{};
    for (final item in items) {
      final hashCls = item.hashCls;
      if (taskMap.containsKey(hashCls)) {
        taskMap[hashCls]!.add(item);
      } else {
        taskMap[hashCls] = [item];
      }
    }

    final outMap = <String, String>{};
    List<String> widgetList = [];
    List<String> constructorList = [];

    var index = 1;
    taskMap.forEach((key, value) {
      final constructor = "\$Div${index++}";
      final item = value.first;
      widgetList.add(WidgetGenerator(item, constructor).generate());
      constructorList.add(constructor);

      for (final item in value) {
        outMap[item.srcCls] = constructor;
      }
    });

    final widgetCode = widgetList.join("\n\n");

    final output = StringBuffer();
    output.writeln("// Generated by EasyDSL");
    output.writeln("// Do Not Modify By Hand\n");
    output.writeln(
        "// ignore_for_file: unused_element, prefer_const_constructors");

    output.writeln("part of '$partOfUri';\n");

    // output.writeln(_genMapCode(outMap));
    output.writeln(_genDivCode(constructorList, outMap));
    // output.writeln(_genConstCode());
    output.writeln(widgetCode);
    return formatter.format(output.toString());
  }

  String _genMapCode(Map<String, String> map) {
    final buffer = StringBuffer();
    buffer.writeln(
        "final divMap = <String, Widget Function(String, EasyOption, List<Widget>?)>{");
    map.forEach((key, value) {
      buffer.writeln(
          "  \"$key\": (cls, o, c) => $value(className: cls, option: o, children: c),");
    });
    buffer.writeln("};");
    return buffer.toString();
  }

  String _genDivCode(List<String> constructorList, Map<String, String> map) {
    return "class \$Div extends StatelessWidget {\n"
        "  const \$Div({\n"
        "   super.key, required this.className, this.children,\n"
        "   this.option = const EasyOption.empty(),\n"
        "  });\n"
        "  final String className;\n"
        "  final EasyOption option;\n"
        "  final List<Widget>? children;\n\n"
        "  @override\n"
        "  Widget build(BuildContext context) {\n"
        "    ${_genMapCode(map)}\n"
        "    var creator = divMap[className.trim()];\n"
        "    ${_genDebugCode()}\n"
        "    return creator != null ? creator(className, option, children) : (children?.length ?? 0) > 0 ? Column(children: children!) : const SizedBox();\n"
        "  }\n"
        "}\n";
  }

  String _genDebugCode() {
    return """
if (kDebugMode) {
  var clsList = className.split(" ").map((e) => e.trim()).toList();
  for (var e in divMap.entries) {
    var l = e.key.split(" ").map((e) => e.trim()).toList();
    var d = easyEditDistance(clsList, l);
    if ((d <= 1 && l.length > 2) || (d <= 3 && l.length > 8)) {
      creator = e.value;
      break;
    }
  }
}
""";
  }
}
